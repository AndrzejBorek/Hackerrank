package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
    "sort"
)

/*
 * Complete the 'biggerIsGreater' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING w as parameter.
 */
 
func biggerIsGreater(w string) string {
    runeSlice := []rune(w)
    
    pivot := -1
    for i := len(runeSlice) - 2; i >= 0; i-- {
        if runeSlice[i] < runeSlice[i+1] {
            pivot = i
            break
        }
    }
    
    if pivot == -1 {
        return "no answer"
    }

    smallestIndex := pivot + 1
    for i := pivot + 2; i < len(runeSlice); i++ {
        if runeSlice[i] > runeSlice[pivot] && runeSlice[i] < runeSlice[smallestIndex] {
            smallestIndex = i
        }
    }

    runeSlice[pivot], runeSlice[smallestIndex] = runeSlice[smallestIndex], runeSlice[pivot]

    sort.Slice(runeSlice[pivot+1:], func(i, j int) bool {
        return runeSlice[pivot+1+i] < runeSlice[pivot+1+j]
    })

    return string(runeSlice)
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    TTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    T := int32(TTemp)

    for TItr := 0; TItr < int(T); TItr++ {
        w := readLine(reader)

        result := biggerIsGreater(w)

        fmt.Fprintf(writer, "%s\n", result)
    }

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

