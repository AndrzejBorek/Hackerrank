package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)

/*
 * Complete the 'counterGame' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts LONG_INTEGER n as parameter.
 */
 
 func getLargestPowerOf2SmallerThanN(n int64) (int64){
	return int64((1 <<(len(strconv.FormatInt(n, 2)) - 1)))
 }
 
 func isPowerOf2(n int64) bool{
     var smallestPowerOf2 = getLargestPowerOf2SmallerThanN(n)
     return ((smallestPowerOf2 | n) == smallestPowerOf2)
 }

func counterGame(n int64) string {
    
    var counter = 1 
    for ;n != 1;{
        if (isPowerOf2(n)){
            n = n/2
        } else {
            n =  n - getLargestPowerOf2SmallerThanN(n)
        }
        counter++
    }
    
    if(counter % 2 != 0 ){
        return "Richard"
    } else {
        return "Louise"
    }
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    tTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    t := int32(tTemp)

    for tItr := 0; tItr < int(t); tItr++ {
        n, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
        checkError(err)

        result := counterGame(n)

        fmt.Fprintf(writer, "%s\n", result)
    }

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

