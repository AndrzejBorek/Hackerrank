package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)

/*
 * Complete the 'cavityMap' function below.
 *
 * The function is expected to return a STRING_ARRAY.
 * The function accepts STRING_ARRAY grid as parameter.
 */

func cavityMap(grid []string) []string {
    var result []string
    var size = len(grid)
    for rowIndex := range(grid){
        if (rowIndex == 0 || rowIndex == size - 1){
            result = append(result, grid[rowIndex])
        } else {
            var stringBuilder strings.Builder
            for charIndex, char := range(grid[rowIndex]){
            if (charIndex == 0 || charIndex == size -1 ){
                 stringBuilder.WriteRune(char)
            } else {
                if (rune(grid[rowIndex - 1][charIndex]) < char && rune(grid[rowIndex + 1][charIndex]) < char &&
                rune(grid[rowIndex][charIndex - 1]) < char &&  rune(grid[rowIndex][charIndex + 1]) < char ) {
                    stringBuilder.WriteRune('X')
                } else {
                    stringBuilder.WriteRune(rune(char))
                }
                
            }
        }
        result = append(result, stringBuilder.String())
        }
        
    }
    return result

}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    nTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    n := int32(nTemp)

    var grid []string

    for i := 0; i < int(n); i++ {
        gridItem := readLine(reader)
        grid = append(grid, gridItem)
    }

    result := cavityMap(grid)

    for i, resultItem := range result {
        fmt.Fprintf(writer, "%s", resultItem)

        if i != len(result) - 1 {
            fmt.Fprintf(writer, "\n")
        }
    }

    fmt.Fprintf(writer, "\n")

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

