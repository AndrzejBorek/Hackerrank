package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)

func dfs(node int32, visited map[int32]bool, adjList map[int32][]int32, subtreeSize map[int32]int32) int32 {
    visited[node] = true

    subtreeCount := int32(0)

    for _, neighbor := range adjList[node] {
        if !visited[neighbor] {
            subtreeCount += dfs(neighbor, visited, adjList, subtreeSize) + 1
        }
    }
    
    subtreeSize[node] = subtreeCount
    return subtreeCount
}

// Complete the evenForest function below.
func evenForest(t_nodes int32, t_edges int32, t_from []int32, t_to []int32) int32 {

    var edgesCut int32 = 0

    adjList := make(map[int32][]int32)
    for i := range t_from {
        adjList[t_from[i]] = append(adjList[t_from[i]], t_to[i])
        adjList[t_to[i]] = append(adjList[t_to[i]], t_from[i])
    }

    visited := make(map[int32]bool)
    subtreeSize := make(map[int32]int32)

    startNode := int32(1) 
    dfs(startNode, visited, adjList, subtreeSize)
    
    
    for i:= int32(1); i <= t_nodes;i++{
        if subtreeSize[i]%2 != 0 && i != 1{
            edgesCut++
        }
    }

    if t_nodes%2 != 0 {
        return 0
    } else {
        return edgesCut
    }
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    tNodesEdges := strings.Split(readLine(reader), " ")

    tNodes, err := strconv.ParseInt(tNodesEdges[0], 10, 64)
    checkError(err)
    t_nodes := int32(tNodes)

    tEdges, err := strconv.ParseInt(tNodesEdges[1], 10, 64)
    checkError(err)
    t_edges := int32(tEdges)

    var t_from, t_to []int32

    for i := 0; i < int(tEdges); i++ {
        edgeFromToWeight := strings.Split(readLine(reader), " ")

        edgeFrom, err := strconv.ParseInt(edgeFromToWeight[0], 10, 64)
        checkError(err)

        edgeTo, err := strconv.ParseInt(edgeFromToWeight[1], 10, 64)
        checkError(err)

        t_from = append(t_from, int32(edgeFrom))
        t_to = append(t_to, int32(edgeTo))
    }

    res := evenForest(t_nodes, t_edges, t_from, t_to)

    fmt.Fprintf(writer, "%d\n", res)

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

