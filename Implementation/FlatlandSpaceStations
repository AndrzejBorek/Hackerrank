package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)

func Abs(x int32) int32 {
    if x < 0 {
        return -x
    }
    return x
}

func isElementInSet(set map[int32]bool, element int32) bool {
    _, exists := set[element]
    return exists
}

func createSetFromArray(arr []int32) map[int32]bool {
    set := make(map[int32]bool)
    for _, v := range arr {
        set[v] = true
    }
    return set
}

func flatlandSpaceStations(n int32, c []int32) int32 {
    
    var stations = createSetFromArray(c)
    var distance = map[int32]int32{}
    var maxDistance = int32(-1)
    var currentStationIndex = c[0]
    
    for city := int32(0); city <n; city++{
        if isElementInSet(stations, city){
            currentStationIndex = city
        }
        distance[city] = Abs(city - currentStationIndex)
    }

    for city := int32(n - 1); city >= 0; city--{
          if isElementInSet(stations, city){
            currentStationIndex = city
        }
        if (distance[city] > Abs(city - currentStationIndex)){
            distance[city] = Abs(city - currentStationIndex)
        }
    }
    
    for _, distance := range(distance){
        if distance > maxDistance{
            maxDistance = distance
        }
    }
    
    return maxDistance
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 1024 * 1024)

    nm := strings.Split(readLine(reader), " ")

    nTemp, err := strconv.ParseInt(nm[0], 10, 64)
    checkError(err)
    n := int32(nTemp)

    mTemp, err := strconv.ParseInt(nm[1], 10, 64)
    checkError(err)
    m := int32(mTemp)

    cTemp := strings.Split(readLine(reader), " ")

    var c []int32

    for i := 0; i < int(m); i++ {
        cItemTemp, err := strconv.ParseInt(cTemp[i], 10, 64)
        checkError(err)
        cItem := int32(cItemTemp)
        c = append(c, cItem)
    }

    result := flatlandSpaceStations(n, c)

    fmt.Fprintf(writer, "%d\n", result)

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

