package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)

/*
 * Complete the 'palindromeIndex' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts STRING s as parameter.
 */


func isReverseOf(s, v string) bool{
    if (len(s) != len(v)){
        return false
    }
    
     for i := range s {
        if s[i] != v[len(v) - i - 1] {
            return false
        }
    }
    return true
}

func palindromeIndex(s string) int32 {
    var mid int = 0
    if len(s)%2 == 0 {
        mid = len(s) / 2
    } else {
        mid = len(s) / 2
    }

    var firstDifferenceIndex int = -1

    for i := range(s[:mid]){
        if( s[i] != s[len(s)-i-1] && firstDifferenceIndex==-1){
            firstDifferenceIndex = i
            break
            }
    }
        
    if (firstDifferenceIndex == -1){
        fmt.Println("String is already a palindrom ")
        return -1
    }

    
    if (len(s)%2 != 0){
        if(isReverseOf(s[firstDifferenceIndex + 1: mid + 1],  s[mid + 1:len(s) - firstDifferenceIndex])){
            return int32(firstDifferenceIndex);
        } else if(isReverseOf(s[firstDifferenceIndex: mid],s[mid :len(s) - firstDifferenceIndex -1] )){
            return(int32(len(s) - firstDifferenceIndex - 1))
        } else {
            return -1
        }
    } else {
        if(isReverseOf(s[firstDifferenceIndex + 1: mid],s[mid + 1:len(s) - firstDifferenceIndex])){
            return int32(firstDifferenceIndex);
        }else if(isReverseOf(s[:mid - 1], s[mid: len(s) - firstDifferenceIndex - 1])){
            return(int32(len(s) - firstDifferenceIndex - 1))
        } else {
            return -1
        }
    }
    
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    qTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    q := int32(qTemp)

    for qItr := 0; qItr < int(q); qItr++ {
        s := readLine(reader)

        result := palindromeIndex(s)

        fmt.Fprintf(writer, "%d\n", result)
    }

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

