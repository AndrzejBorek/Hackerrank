package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strings"
    "math"
)

/*
 * Complete the 'isValid' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

func isValid(s string) string {
    
    if (len(s) == 1){
       return "YES"
    }
    
    helpMap := make(map[byte]int64)
    distinctValuesMap := make(map[int64]int64)
    
    for i := range(s){
        helpMap[s[i]]++
    }
    
    for _, value := range(helpMap){
        distinctValuesMap[value]++
    }
    
    if (len(distinctValuesMap) > 2){
        return "NO"
    }
    if (len(distinctValuesMap) == 1){
        return "YES"
    }
    
    var keys []int64
    var values []int64
   
    for key, value := range(distinctValuesMap){
        keys = append(keys, key)
        values = append(values, value)
    }
    
    if ((keys[0] == 1 && values[0] == 1) || (keys[1] == 1 && values[1] == 1)){
        return "YES"
    }
    
    
    if (math.Abs(float64(keys[0] - keys[1])) > 1){
        return "NO"
    } else {  
        if (values[0] != 1 && values[1] != 1){
            return "NO"
        }
    }
    
    return "YES"
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    s := readLine(reader)

    result := isValid(s)

    fmt.Fprintf(writer, "%s\n", result)

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

