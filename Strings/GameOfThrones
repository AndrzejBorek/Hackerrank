package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strings"
)

/*
 * Complete the 'gameOfThrones' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

func gameOfThrones(s string) string {
    
    letterMap := make(map[byte]int)
    for i :=0 ; i < len(s) ; i++{
        fmt.Println(s[i])
        letterMap[s[i]] += 1
    }
    
    var numberOfOddOccurencesOfLetters = 0
    
    for _, value := range letterMap {
        if value %2 != 0 {
            numberOfOddOccurencesOfLetters += 1
        }
    }
    
    var result string
    
    if ((len(s) %2 == 0  && numberOfOddOccurencesOfLetters == 0 )|| (len(s) %2 != 0  && numberOfOddOccurencesOfLetters == 1 )){
        result = "YES"
    } else {
        result = "NO"
    }
    
    return result
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    s := readLine(reader)

    result := gameOfThrones(s)

    fmt.Fprintf(writer, "%s\n", result)

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

